package Trabalho;
/*
  -----------------------------------------------
	Essa classe deve implementar os numeros 1 a 6 do trabalho.
  -----------------------------------------------
	1) Comece a contar o tempo.
	
	2) Carregue o vetor com um dos arquivos de registros.

	3) Use o método HeapSort para ordenar por CPF, se houver mais de um CPF igual, eles
		serão ordenados pelo número da conta. Grave o resultado em um arquivo com o nome
		contendo o método (HEAP)+tipo(ALEA ou ORD ou INV)+ tamanho.txt.
	
	4) Use a Pesquisa Binária para pesquisar 400 registros pelo CPF. Estes registros
		estarão em um arquivo que será fornecido pela professora. Ao final, o grupo deve gerar
		um outro arquivo onde, para cada CPF que for encontrado, será gravado a agência, o
		numero da conta (que deve ser separado e identificado como conta corrente e poupança)
		e o saldo e, ao final, o saldo total daquele CPF. Se o CPF não for encontrado deve-se
		gravar uma mensagem de NÃO HÁ CLIENTE COM O CPF (colocar o número do CPF).
		Veja o exemplo abaixo:
		
CPF 11122233345:
agencia 123 Conta Corrente 001123123 Saldo: -200,00
agencia 223 Conta Corrente 001223222 Saldo: 500,00
agencia 123 Conta Poupança 00212311 Saldo: 5000,00
Saldo total: 5300,00
CPF 11111222245:
NÃO HÁ CLIENTE COM O CPF 11111222245
	
	5) Repita 4 vezes o processo 2 a 4. Você deve rodar o processo 5 vezes no total. Os
		arquivos gerados podem ser regravados, ou seja, no final você terá apenas um arquivo
		para cada tamanho, tipo e método. Por exemplo HeapPesqAlea500.txt.

	6) Termine de contar o tempo, faça uma média e armazene este resultado.
*/
public class PequisaHeap {
	

}
